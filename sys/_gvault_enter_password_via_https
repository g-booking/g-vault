#!/usr/local/_gvault/bin/perl
use strict;
use feature          qw( signatures                         );
no  warnings         qw( experimental::signatures           );
use Crypt::Argon2    qw(argon2id_pass argon2id_raw          );
use sigtrap          qw(handler handle_signal normal-signals);
use Digest::SHA      qw(sha512_hex                          );
use IO::Socket::SSL;
use HTTP::Daemon::SSL;
use HTTP::Status;
use HTTP::Tiny;
use IO::Socket::Timeout;
use JSON::XS;
use Syntax::Keyword::Try;
require "/usr/local/_gvault/lib/gVault.pm";

use constant {
   REQUEST_MATCH    =>  '/gvault/',
   SCRIPT_TIME_OUT  =>  120,
   GVAULT_CERTS_DIR =>  '/usr/local/_gvault/certs/',
   GVAULT_SSL_PORT  =>  6742,
   LOOK_UP_IP_INFO  =>  1,
};

die ("You need a [" . GVAULT_CERTS_DIR . "fullchain.pem] certificate to use SSL.\n") if not -f  GVAULT_CERTS_DIR . "/fullchain.pem";

my $etc_name = gVault::get_etc_location(".");
die ("Have you created a vault?\n") if  not $etc_name;
gVault::load_json_conf_into_config($etc_name);
die "Do you have etc/gVault.conf available?\n" if not gVault::config(26);

# (1)  - iterations      32
# (2)  - memory in MB    64
# (3)  - cpu cores.       1

$|        = 1;
my $i     = int($ARGV[0]) || 32;  # iterations
my $m     = int($ARGV[1]) || 64;  # memory
my $c     = int($ARGV[2]) ||  1;  # cpu cores
$m       .= 'M';
my $gexit = 1;
my $ip_cache;




main ( make_ssl_socket() );



sub main ($ssl_socket) {
  if ( my $gvault = get_some_ssl_input_for_the_gvault_password($ssl_socket) ) {
    ## so here we have a PERL DATA structure which looks like:
  
    #          content => "gv=44567665555533333456778876443345",
    #          country => "United Kingdom of Great Britain and Northern Ireland",
    #          ip_no => "92.40.170.200",
    #          isp => "Hutchison 3G UK Limited",
    #          url => bless(do{\(my $o = "/gvault")}, "URI::https"),
  
    # Now, you can decide which fields to use... always use content of course and probably url... and if you will always authenticate from the UK then you could use country...
    # Bear in mind then you will not be able to authenticate from abroad... if you always do it from a mobile on the THREE network then you could also use isp.
    # It is highly recommended to only use CONTENT + URL until you are sure as this is the one thing YOU control where the others you do not... it does means however
    # that even if you are fully hacked then the incoming request must come from an IPNO owed my the mobile companny you use and therefore for the BAD ACTOR it
    # will fail always... just giving you some ideas... for you to do whatever you want to do...
    # OVERALL:  If you authenticate using items OUTSIDE of your control then it's a good idea to backup them UP in an entirely seperate subsystem to the resources you are trying to protect.
  
    # Here you decide what to return, the below should be safe...
    print STDOUT ( gVault::to_hex( argon2id_raw( gVault::config(29) . $gvault->{content} .  $gvault->{url}, gVault::config(30), $i, $m, $c, 32  ) )) . "\n";
  }
  undef $ssl_socket;
}

sub get_some_ssl_input_for_the_gvault_password ($ssl_socket) {
  IO::Socket::Timeout->enable_timeouts_on($ssl_socket);
  $ssl_socket->read_timeout (10);
  $ssl_socket->write_timeout(10);
  print STDERR ("gVault SSL awaiting connection on port [" . GVAULT_SSL_PORT . "].  (ctrl-c to cancel)");
  my $nl = "\n";
  my $time_out = time() + SCRIPT_TIME_OUT - 10;
  while ( $gexit ) {
    _ERROR("$nl\gVault will shortly timeout and abort, you'll need to re-login if required.") if time() >= $time_out;
    $gexit = 0 if time() >= $time_out;
    my $gvault;
    while (my $c = $ssl_socket->accept and $gexit) {
      while (my $r = $c->get_request and $gexit) {
        my $remote_host;
        $remote_host = $c->peerhost if $c->peerhost;
        if ( $remote_host ) {
          my $ip = get_ip_information($remote_host);
          if ( ( $r->method eq 'POST' or $r->method eq 'GET' ) and $r->url->path=~m/^${\REQUEST_MATCH}/ ) { 
            if ( $ip ) {
              _ERROR("$nl\Accepting request from [$ip->{isp}] located in [$ip->{country_name}] using [$remote_host].") if $ip;
              $gvault->{isp}     = $ip->{isp};
              $gvault->{country} = $ip->{country_name};
            }
            else {
              _ERROR("$nl\Accepting request from [$remote_host].");
              $gvault->{isp}     = '';
              $gvault->{country} = '';
            }
            $gvault->{ip_no}   = $remote_host;
            $gvault->{url}     = $r->{_uri};
            $gvault->{content} = $r->{_content};
            $c->send_response(RC_OK);
            $c->close;
            last;
          }
          else {
            _ERROR("$nl\Incoming request for path [" . $r->url->path . "]. We expect [" . REQUEST_MATCH . "] so I've closed it.") if $r->url->path ne '/favicon.ico';
            $c->send_response(RC_OK);
            $nl = '';
            last;
          }
          last; # just one go my man
        }
        $nl = '';
      }
      $c->close;
      undef($c);
      return $gvault if $gvault;
    }
  }
  _ERROR("$nl\Chow bella, no password set.");
  return;
}

sub make_ssl_socket {
  my $certs_dir   = GVAULT_CERTS_DIR;  # (add trailing / in directory)
  my $ssl_socket  = HTTP::Daemon::SSL->new (
    LocalAddr     => '0.0.0.0',
    LocalPort     => GVAULT_SSL_PORT,
    Listen        => 1,
    ReuseAddr     => 1,
    SSL_cert_file => $certs_dir . 'fullchain.pem',
    SSL_key_file  => $certs_dir . 'privkey.pem',
  ) or die "failed to listen: $!";
  return $ssl_socket;
}

sub get_ip_information ($ip) {
  ## just a little testy westy to show how easy things can be...
  return if not LOOK_UP_IP_INFO;
  return $ip_cache->{$ip} if $ip_cache->{$ip};
  try {
    my $response = HTTP::Tiny->new->get("https://api.iplocation.net/?ip=$ip");
    if ( $response and $response->{content} and $response->{status} == 200 ) {
      $ip_cache->{$ip} = decode_json($response->{content});
      return $ip_cache->{$ip};
    }
  }
  catch {
    _ERROR ($@);
  }
  return;
}

sub handle_signal {
  print STDERR "\nExiting gVault SSL entry due to [$_[0]] signal. Please wait...\n";
  $gexit = 0;
}

sub _ERROR ($message) {
  chomp $message;
  print STDERR $message . "\n";
  return;
}
