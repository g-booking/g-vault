#!/usr/local/_gvault/bin/perl
use strict;
use sigtrap qw/handler handle_signal normal-signals/;
use Digest::SHA qw(sha512_hex);
use Crypt::Argon2 qw/argon2id_pass argon2id_raw/;
require "/usr/local/_gvault/lib/gVault.pm";

my $etc_name = gVault::get_etc_location(".");
die ("Have you created a vault?\n") if  not $etc_name;
gVault::load_json_conf_into_config($etc_name);

die "Do you have etc/gVault.conf available?\n" if not gVault::config(26);

# (1)  - iterations      32 
# (2)  - memory in MB    64
# (3)  - cpu cores.       1

my $i = int($ARGV[0]) || 32;  # iterations
my $m = int($ARGV[1]) || 64;  # memory
my $c = int($ARGV[2]) ||  1;  # cpu cores

die "<iterations> <memory> <cpu_cores>\n" if not $i or not $m or not $c;

print ( from_my_keyboard_input_prompt($i, $m, $c) . "\n");

sub from_my_keyboard_input_prompt {
    my ($i, $m, $c) = @_;
    print STDERR "Using ($i, $m, $c) for <iterations> <memory> <cpu_cores>\n" if not $ARGV[2];
    $m .= 'M';
    use Term::ReadKey;
    my $PASSWORD = 1;
    my $password2= 2;
    print STDERR "gVault ARGON key @ $m.";
    while ( $PASSWORD ne $password2 ) {
      Term::ReadKey::ReadMode('noecho');
      print STDERR "\ngVault secret please : ";
      $PASSWORD = Term::ReadKey::ReadLine(0);
      print STDERR "\n";
      print STDERR "gVault secret re-type: ";
      $password2 = Term::ReadKey::ReadLine(0);
      print STDERR "\n";
      Term::ReadKey::ReadMode('restore');
    }
    return gVault::to_hex(gVault::blake2b_256( 'G' . gVault::config(25) . gVault::keccak512( '!^!"' . argon2id_raw( gVault::config(26) . $PASSWORD, gVault::config(25), $i, $m, $c, 32  )  . '&"?' )));
}

sub handle_signal {
  ## got a signal... restore...and exit...
  Term::ReadKey::ReadMode('restore');
  print STDERR "\nExiting gVault keyboard entry due to [$_[0]] signal.\n";
  exit;
}
