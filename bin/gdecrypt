#!/usr/local/_gvault/bin/perl
# v1.0
use v5.20;
use strict;
use warnings;
#use Compress::LZ4;
use Compress::Zlib;
use gVault;
#require "/usr/local/_gvault/lib/gVault.pm";

##use gVault qw ( gvault gdecrypt get_vault_name);
## No buffering...
$| = 1;

### so here is simple... we read a file in chunks.... and we encrypt each.. with it's own HMAC, with it's own CRYPT.... 
my $stdin_fh   = *STDIN;
my $read_ok    = -1;
my $vault_name;
$vault_name = $ENV{_gvde_} if  $ENV{_gvde_};
$vault_name = $ARGV[0]     if  $ARGV[0];
die "Usage $0 <name_of_vault__or__vault_location>\n" if not $vault_name;

my $next_s     = '';

gVault::gvault ( $vault_name ) or die "I could not load the master vault for that.\n";
$vault_name    = gVault::get_vault_name($vault_name);

while ( $read_ok != 0 ) {
  ## Header...
  my $header_data = '';
  while ( length($header_data) != 5 and $read_ok != 0) {
    $read_ok      = sysread ( $stdin_fh, my $data, 5 - length($header_data) );
    $header_data .= $data;
  }
  if ( length( $header_data ) == 5  ) {
    ## that's our length header in simple hex.
    ## very converluted.. clearly join and split can be done in 1 but I tried now for 10 minutes and failed so fuck it... so done some crazy shit man.
    ## now we read in the entire block and then decypt it...
    ## we might have to go around and around here to make sure we got all the data...
    my $encrypt = substr($header_data,0,1);
    my $length_header = hex( ( join '', split '', unpack 'H*', substr($header_data,1)  ) );  # crazy!
    my $data = ''; ## ? good?? dunno
    while ( length($data) != $length_header ) {
      if ( $read_ok  = sysread ( $stdin_fh, my $tdata, ($length_header - length($data)) ) ) {
        $data .= $tdata;
      }
      else {
        die "WARNING: I got a [0] byte read and I expected more data.\n"; 
      }
    }
    ($next_s, $data) = gVault::gdecrypt ($vault_name, $data, $next_s) or die "I need a doctor.\n";
    print STDOUT $data             if defined $data and not $encrypt;
    print STDOUT uncompress($data) if defined $data and     $encrypt;
  }
  elsif ( $read_ok == 0  and  length($header_data) == 0 )   {
    ## that looks like success..
    last;
  }
  elsif ( $read_ok == 0 )   {
    # something messed up here... let's harakiri... we only have part of a header and we have a 0 read.. 
    die "Encrypted file is corrupt.\n";
  }
  else {
    ## no idea at all.
    die "Encrypted file is likely corrupt.. no ideas really.\n";
  }
}
